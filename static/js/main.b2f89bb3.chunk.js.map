{"version":3,"sources":["components/search-bar.js","components/video-list-item.js","components/video-list.js","components/video-detail.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","state","term","className","name","value","this","onChange","e","onInputChange","target","setState","props","onSearchTermChange","Component","VideoListItem","video","onVideoSelect","imageUrl","snippet","thumbnails","default","url","onClick","src","alt","title","VideoList","videos","videoItems","map","key","etag","VideoDetail","videoId","id","description","API_KEY","App","videoSearch","YTSearch","selectedVideo","console","log","_","debounce","item","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SA+BeA,E,YA5BX,aAAe,IAAD,8BACV,+CACKC,MAAQ,CACTC,KAAM,IAHA,E,sEAOJ,IAAD,OACL,OACI,yBAAKC,UAAU,yBAEX,2BACIA,UAAU,2BACVC,KAAK,OACLC,MAAOC,KAAKL,MAAMC,KAElBK,SAAU,SAAAC,GAAC,OAAI,EAAKC,cAAcD,EAAEE,OAAOL,a,oCAM7CH,GACVI,KAAKK,SAAS,CAAET,SAChBI,KAAKM,MAAMC,mBAAmBX,O,GAzBdY,a,yBCgBTC,EAhBO,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,cACtBC,EAAWF,EAAMG,QAAQC,WAAWC,QAAQC,IAClD,OACI,wBAAIC,QAAU,kBAAMN,EAAcD,IAAQb,UAAU,mBAChD,6BACI,6BACI,yBAAKqB,IAAKN,EAAUO,IAAI,MAE5B,6BACKT,EAAMG,QAAQO,UCSpBC,EAjBG,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,OAAQX,EAAoB,EAApBA,cACnBY,EAAaD,EAAOE,KAAI,SAAAd,GAAK,OAC/B,kBAAC,EAAD,CACIe,IAAMf,EAAMgB,KACZhB,MAAQA,EACRC,cAAgBA,OAIxB,OACI,wBAAId,UAAU,uBAET0B,ICQEI,EArBK,SAAC,GAAe,IAAbjB,EAAY,EAAZA,MACnB,IAAKA,EACD,OAAO,0CAGX,IAAMkB,EAAUlB,EAAMmB,GAAGD,QACnBZ,EAAG,wCAAoCY,GAC7C,OACI,yBAAK/B,UAAU,YACX,yBAAKA,UAAU,2CACX,4BAAQuB,MAAM,QAAQF,IAAKF,KAG/B,yBAAKnB,UAAU,QACVa,EAAMG,QAAQO,MACf,+BAAQV,EAAMG,QAAQiB,gBCRhCC,EAAU,0CAwDDC,E,YArDb,WAAY1B,GAAQ,IAAD,8BACjB,4CAAMA,KASR2B,YAAc,SAACrC,GACbsC,IAEE,CACET,IAAKM,EACLnC,KAAMA,IAIR,SAAA0B,GACE,EAAKjB,SAAS,CACZiB,OAAQA,EACRa,cAAeb,EAAO,KAExBc,QAAQC,IAAI,EAAK1C,MAAM2B,YAtB3B,EAAK3B,MAAQ,CACX2B,OAAQ,GACRa,cAAe,MAGjB,EAAKF,YAAY,QAPA,E,sEA6BT,IAAD,OACDA,EAAcK,IAAEC,UAAS,SAAAC,GAAS,EAAKP,YAAYO,KAAQ,KACjE,OACE,yBAAK3C,UAAU,yBACb,8CACA,kBAAC,EAAD,CACEU,mBAAoB0B,IAItB,yBAAKpC,UAAU,UACb,kBAAC,EAAD,CACEa,MAAOV,KAAKL,MAAMwC,gBAEpB,kBAAC,EAAD,CACEb,OAAQtB,KAAKL,MAAM2B,OACnBX,cAAe,SAAAwB,GAAa,OAAI,EAAK9B,SAAS,CAAE8B,2B,GA9C1C3B,aCCEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b2f89bb3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass SearchBar extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            term: ''\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"search-bar form-group\"> \r\n                {/* <label>Search: </label> */}\r\n                <input\r\n                    className=\"form-control text-center\"\r\n                    name='term'\r\n                    value={this.state.term}\r\n                    // onChange={e => this.setState({ term: e.target.value })}\r\n                    onChange={e => this.onInputChange(e.target.value)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    onInputChange(term){\r\n        this.setState({ term })\r\n        this.props.onSearchTermChange(term)\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from 'react';\r\n\r\nconst VideoListItem = ({ video, onVideoSelect }) => {\r\n    const imageUrl = video.snippet.thumbnails.default.url;\r\n    return (\r\n        <li onClick={ () => onVideoSelect(video)} className=\"list-group-item\">\r\n            <div>\r\n                <div>\r\n                    <img src={imageUrl} alt=\"\" />\r\n                </div>\r\n                <div>\r\n                    {video.snippet.title}\r\n                </div>\r\n            </div>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default VideoListItem;","import React from 'react';\r\nimport VideoListItem from './video-list-item';\r\n\r\nconst VideoList = ({ videos, onVideoSelect }) => {\r\n    const videoItems = videos.map(video => \r\n        <VideoListItem \r\n            key={ video.etag } \r\n            video={ video } \r\n            onVideoSelect={ onVideoSelect }\r\n        /> \r\n    )\r\n\r\n    return ( \r\n        <ul className=\"col-md-4 list-group\">\r\n            {/* {videos.length} */}\r\n            {videoItems}\r\n        </ul>\r\n     );\r\n}\r\n \r\nexport default VideoList;","import React from 'react';\r\n\r\nconst VideoDetail = ({ video }) => {\r\n    if (!video) {\r\n        return <h3>Loading...</h3>\r\n    }\r\n\r\n    const videoId = video.id.videoId\r\n    const url = `https://www.youtube.com/embed/${videoId}`;\r\n    return (\r\n        <div className=\"col-md-8\">\r\n            <div className=\"embed-responsive embed-responsive-16by9\">\r\n                <iframe title=\"Title\" src={url} />\r\n            </div>\r\n\r\n            <div className=\"mt-3\">\r\n                {video.snippet.title}\r\n                <small>{video.snippet.description}</small>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VideoDetail;","import _ from 'lodash';\nimport React, { Component } from 'react';\nimport SearchBar from './components/search-bar';\nimport './App.css';\nimport YTSearch from 'youtube-api-search'\nimport VideoList from './components/video-list';\nimport VideoDetail from './components/video-detail';\n\n// const API_KEY = 'AIzaSyDuMiNN4F7rNdWhEQdNQ9_Q4hx2539lHns'\nconst API_KEY = 'AIzaSyD1NjfrSzy23hh8KbCdR__Yr-YisomUUZY'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      videos: [],\n      selectedVideo: null\n    }\n\n    this.videoSearch('baby')\n  }\n  \n  videoSearch = (term) => {\n    YTSearch(\n      //config option\n      {\n        key: API_KEY,\n        term: term\n      },\n\n      //callback function\n      videos => {\n        this.setState({ \n          videos: videos,\n          selectedVideo: videos[0]\n        })\n        console.log(this.state.videos)\n      }\n    )\n  }\n\n  render() {\n    const videoSearch = _.debounce(item => {this.videoSearch(item)}, 800)\n    return (\n      <div className=\"container text-center\">\n        <h3>My Youtube App</h3>\n        <SearchBar \n          onSearchTermChange={videoSearch}\n          // onSearchTermChange={(term) => this.videoSearch(term)}\n        />\n\n        <div className=\"d-flex\">\n          <VideoDetail\n            video={this.state.selectedVideo}\n          />\n          <VideoList\n            videos={this.state.videos}\n            onVideoSelect={selectedVideo => this.setState({ selectedVideo })}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// eslint-disable-next-line no-unused-vars\nimport bootstrap from 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}